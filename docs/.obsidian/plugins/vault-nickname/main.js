/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VaultNicknamePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_PLUGIN_SETTINGS = {
  overrideAppTitle: "override-app-title:file-first"
};
var DEFAULT_SHARED_SETTINGS = {
  nickname: "My Vault Nickname"
};
var PATH_SEPARATOR = import_obsidian.Platform.isWin ? "\\" : "/";
var VAULT_LOCAL_SHARED_SETTINGS_FILE_PATH = ".vault-nickname";
var VaultNicknamePlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    /// Is the plugin is enabled. Used by `onload` to reliably check the
    /// plugin's state as a workaround for `this.app.plugins.enabledPlugins`
    /// omitting plugins that are actively loading.
    ///
    this.isEnabled = false;
  }
  async onload() {
    this.isEnabled = true;
    this.vaultItemRenamedCallback = this.onVaultItemRenamed.bind(this);
    this.activeLeafChangeCallback = this.onActiveLeafChange.bind(this);
    await this.loadSettings();
    const settingsFilePath = this.getSharedSettingsFilePath();
    let saveSettingsExist = false;
    await this.app.vault.adapter.exists(settingsFilePath).then(
      (exists) => {
        saveSettingsExist = exists;
      },
      (rejectReason) => {
        saveSettingsExist = false;
      }
    );
    if (!saveSettingsExist) {
      await this.saveSettings();
    }
    this.addSettingTab(new VaultNicknameSettingTab(this.app, this));
    this.app.workspace.onLayoutReady(this.onLayoutReady.bind(this));
    this.registerEvent(this.app.vault.on("rename", this.vaultItemRenamedCallback));
    this.registerEvent(this.app.workspace.on("active-leaf-change", this.activeLeafChangeCallback));
  }
  onunload() {
    this.isEnabled = false;
    this.useVaultSwitcherCallbacks(false);
    this.refreshVaultDisplayName();
    if (this.desktopVaultSwitcherElement) {
      this.desktopVaultSwitcherElement.remove();
      this.desktopVaultSwitcherElement = null;
    }
  }
  /// Creates an invisible 'interceptor' element over the vault switcher
  /// element. This is used to catch click events and recreate Obsidian's
  /// normal menus, but displaying the vault nicknames. This was necessary
  /// to make the plugin work on macOS where these context menus are rendered
  /// natively and otherwise couldn't be modified.
  ///
  onLayoutReady() {
    const originalDesktopVaultSwitcherElement = window.activeDocument.querySelector(".workspace-drawer-vault-switcher");
    if (!originalDesktopVaultSwitcherElement) {
      console.error("Vault switcher element not found. Cannot create element to intercept its events.");
    } else {
      originalDesktopVaultSwitcherElement.style.position = "relative";
      this.desktopVaultSwitcherElement = originalDesktopVaultSwitcherElement.createDiv(".workspace-drawer-vault-switcher-vault-nickname-interceptor");
      Object.assign(
        this.desktopVaultSwitcherElement.style,
        {
          position: "absolute",
          top: "0",
          left: "0",
          width: "100%",
          height: "100%",
          backgroundColor: "transparent",
          display: "none"
        }
      );
      this.desktopVaultSwitcherElement.addEventListener("click", this.onVaultSwitcherClicked.bind(this));
      this.desktopVaultSwitcherElement.addEventListener("contextmenu", this.onVaultSwitcherContextMenu.bind(this));
      this.useVaultSwitcherCallbacks(true);
    }
    this.refreshVaultDisplayName();
  }
  useVaultSwitcherCallbacks(use) {
    if (import_obsidian.Platform.isMobile) {
      return;
    }
    if (this.desktopVaultSwitcherElement) {
      this.desktopVaultSwitcherElement.style.display = use ? "block" : "hidden";
    }
  }
  /// Query for a selector. If not found, try observing for
  /// `timeoutMilliseconds` for it to be added, otherwise return `null`.
  ///
  async waitForSelector(searchFrom, selector, timeoutMilliseconds) {
    return new Promise((resolve) => {
      const element = searchFrom.querySelector(selector);
      if (element) {
        return resolve(element);
      }
      const timeout = setTimeout(() => resolve(null), timeoutMilliseconds);
      const observer = new MutationObserver((mutations) => {
        const element2 = searchFrom.querySelector(selector);
        if (element2) {
          clearTimeout(timeout);
          observer.disconnect();
          resolve(element2);
        }
      });
      observer.observe(searchFrom, {
        childList: true,
        subtree: true
      });
    });
  }
  /// Invoked when a vault item is renamed. Applies the vault's nickname to
  /// the window title.
  ///
  onVaultItemRenamed(_) {
    this.refreshVaultDisplayName();
  }
  /// Invoked when the active workspace leaf was changed. Applies the vault's
  /// nickname to the window title.
  ///
  onActiveLeafChange(_) {
    this.refreshVaultDisplayName();
  }
  /// Invoked when the user clicks the workspace's vault switcher drawer.
  /// This function changes the vault names shown in the vault popup menu
  /// to the names provided by the vault's personal Vault Nickname plugin.
  ///
  onVaultSwitcherClicked(event2) {
    if (event2.shiftKey) {
      return;
    }
    event2.stopPropagation();
    const vaults = electron.ipcRenderer.sendSync("vault-list");
    const menu = new import_obsidian.Menu();
    for (let vaultKey in vaults) {
      const vault = vaults[vaultKey];
      const vaultPath = (0, import_obsidian.normalizePath)(vault.path);
      let vaultName = vaultPath.substring(vaultPath.lastIndexOf("/") + 1);
      const vaultPluginSettingsFilePath = (0, import_obsidian.normalizePath)([
        vault.path,
        VAULT_LOCAL_SHARED_SETTINGS_FILE_PATH
      ].join(PATH_SEPARATOR));
      if (this.filePathExistsSync(vaultPluginSettingsFilePath)) {
        const vaultPluginSettingsJson = this.readUtf8FileSync(vaultPluginSettingsFilePath);
        if (vaultPluginSettingsJson) {
          const vaultPluginSettings = JSON.parse(vaultPluginSettingsJson);
          if (vaultPluginSettings && vaultPluginSettings.nickname && vaultPluginSettings.nickname.trim()) {
            vaultName = vaultPluginSettings.nickname.trim();
          }
        }
      }
      menu.addItem(
        (item) => item.setTitle(vaultName).setChecked(vault.path === this.app.vault.adapter.basePath).onClick(
          () => window.open(`obsidian://open?vault=${vaultKey}`)
        )
      );
    }
    menu.addSeparator();
    menu.addItem(
      (item) => item.setTitle(window.OBSIDIAN_DEFAULT_I18N.interface.manageVaults).setIcon("open-vault").onClick(
        () => this.app.commands.executeCommandById("app:open-vault")
      )
    );
    menu.showAtMouseEvent(event2);
  }
  /// Invoked when the user context-clicks on the vault switcher drop down.
  /// Adds a "Set nickname" item to the spawned menu as a shortcut to the
  /// plugin's settings page.
  ///
  async onVaultSwitcherContextMenu() {
    if (import_obsidian.Platform.isMobile) {
      return;
    }
    if (event.shiftKey) {
      return;
    }
    event.stopPropagation();
    const menu = new import_obsidian.Menu();
    const showInFolderText = import_obsidian.Platform.isMacOS ? window.OBSIDIAN_DEFAULT_I18N.plugins.openWithDefaultApp.actionShowInFolderMac : window.OBSIDIAN_DEFAULT_I18N.plugins.openWithDefaultApp.actionShowInFolder;
    menu.addItem(
      (item) => item.setTitle(`${showInFolderText}...`).setIcon("lucide-arrow-up-right").onClick(
        () => this.app.showInFolder("")
      )
    );
    menu.addSeparator();
    menu.addItem(
      (item) => item.setTitle("Vault Nickname settings").setIcon("settings").onClick(() => this.openVaultNicknameSettings())
    );
    menu.showAtMouseEvent(event);
  }
  /// Invoked by the custom "Set nickname" menu item added to the vault
  /// switcher's context menu. Opens the plugins setting page for quick
  /// access to nickname field.
  ///
  async openVaultNicknameSettings() {
    this.app.commands.executeCommandById("app:open-settings");
    const settingsMenu = await this.waitForSelector(window.activeDocument, ".mod-settings", 200);
    if (!settingsMenu) {
      console.error("The vault settings menu was not found after the timeout.");
      return;
    }
    const anyTab = await this.waitForSelector(window.activeDocument, ".vertical-tab-nav-item", 200);
    if (!anyTab) {
      console.error("Timeout while waiting for a settings menu tab to be found.");
      return;
    }
    const settingsTabs = settingsMenu.querySelectorAll(".vertical-tab-nav-item");
    for (const tab of settingsTabs) {
      if (tab.textContent !== this.manifest.name) {
        continue;
      }
      tab.click();
      return;
    }
    console.error("Plugin tab not found.");
  }
  /// Refresh the text for the active vault in the workspace's vault switcher
  /// drawer. If no nickname exists for the active vault, the label will
  /// fallback to the vault's folder name.
  ///
  refreshVaultDisplayName() {
    const currentVaultName = this.isEnabled && this.sharedSettings && this.sharedSettings.nickname && this.sharedSettings.nickname.trim() ? this.sharedSettings.nickname.trim() : this.app.vault.getName();
    this.setVaultDisplayName(currentVaultName);
  }
  /// Change the display name of the active vault in the workspace's vault
  /// switcher drawer and the app window's title.
  ///
  async setVaultDisplayName(vaultDisplayName) {
    const selectedVaultNameElement = await this.getVaultTitleElement();
    if (!selectedVaultNameElement) {
      console.error("Vault name element not found. Cannot apply nickname.");
      return;
    }
    if (selectedVaultNameElement) {
      selectedVaultNameElement.textContent = vaultDisplayName;
    }
    this.setAppTitle(vaultDisplayName);
  }
  /// Change the app's title. This applies the provided vault name and
  /// optionally switches the order of the vault and document names.
  ///
  setAppTitle(vaultDisplayName) {
    if (import_obsidian.Platform.isMobileApp) {
      return;
    }
    if (this.settings.overrideAppTitle === "override-app-title:off") {
      this.app.workspace.updateTitle();
      return;
    }
    const titleSeparator = " - ";
    const appTitle = this.app.title;
    if (!appTitle) {
      console.error("no this.app.title");
      return;
    }
    const titleParts = appTitle.split(titleSeparator);
    if (!titleParts || titleParts.length < 2) {
      console.error("unexpected title format: " + appTitle);
      return;
    }
    const obsidianVersion = titleParts[titleParts.length - 1];
    const documentTitle = (() => {
      const activeEditor = this.app.workspace.activeEditor;
      if (activeEditor && activeEditor.titleEl) {
        return activeEditor.titleEl.textContent;
      }
      return "New tab";
    })();
    if (this.settings.overrideAppTitle === "override-app-title:vault-first") {
      window.activeDocument.title = [
        vaultDisplayName,
        documentTitle,
        obsidianVersion
      ].join(titleSeparator);
    } else {
      window.activeDocument.title = [
        documentTitle,
        vaultDisplayName,
        obsidianVersion
      ].join(titleSeparator);
    }
  }
  /// Load the vault's nickname. Currently, a hidden file in the root of the
  /// vault is used because it simplifies sharing vault nicknames between
  /// other instances of the plugin.
  ///
  async loadSettings() {
    const loadedSharedSettings = Object.assign({}, DEFAULT_SHARED_SETTINGS);
    const parentFolderName = this.getVaultParentFolderName();
    if (parentFolderName) {
      loadedSharedSettings.nickname = parentFolderName;
    }
    const sharedSettingsFilePath = this.getSharedSettingsFilePath();
    if (this.filePathExistsSync(sharedSettingsFilePath)) {
      const settingsJson = this.readUtf8FileSync(sharedSettingsFilePath);
      loadedSharedSettings;
      Object.assign(loadedSharedSettings, JSON.parse(settingsJson));
    }
    this.sharedSettings = loadedSharedSettings;
    this.settings = Object.assign({}, DEFAULT_PLUGIN_SETTINGS, await this.loadData());
    this.refreshVaultDisplayName();
  }
  /// Write the vault's nickname to disk. Currently, a hidden file in the
  /// root of the vault is used because it simplifies sharing vault nicknames
  /// between other instances of the plugin.
  ///
  async saveSettings() {
    const sharedSettingsFilePath = this.getSharedSettingsFilePath();
    if (sharedSettingsFilePath) {
      const sharedSettingsJson = JSON.stringify(this.sharedSettings, null, 2);
      this.writeUtf8FileSync(sharedSettingsFilePath, sharedSettingsJson);
    }
    await this.saveData(this.settings);
    this.refreshVaultDisplayName();
  }
  async getVaultTitleElement() {
    return await this.waitForSelector(
      window.activeDocument,
      import_obsidian.Platform.isDesktop ? ".workspace-drawer-vault-name" : ".workspace-drawer-header-name-text",
      200
    );
  }
  /// Get the name of the vault's parent folder. This is used as the plugin's
  /// default vault nickname
  ///
  getVaultParentFolderName() {
    const vaultAbsoluteFilePath = this.app.vault.adapter.getBasePath();
    if (!vaultAbsoluteFilePath) {
      return "";
    }
    const explodedVaultPath = vaultAbsoluteFilePath.split(PATH_SEPARATOR);
    const indexOfParentFolder = explodedVaultPath.length - 2;
    if (indexOfParentFolder < 0 || !explodedVaultPath[indexOfParentFolder] || !explodedVaultPath[indexOfParentFolder].trim()) {
      return "";
    }
    return explodedVaultPath[indexOfParentFolder].trim();
  }
  /// Get the absolute path to this vault's nickname settings. This is a
  /// hidden file in the root of the vault. Ideally, we would have this file
  /// in the plugin's install folder but it is currently tricky to access
  /// files in other vaults' config folder.
  ///
  getSharedSettingsFilePath() {
    return [
      this.app.vault.adapter.getBasePath(),
      VAULT_LOCAL_SHARED_SETTINGS_FILE_PATH
    ].join(PATH_SEPARATOR);
  }
  // Using synchronous calls because they prevent momentary flicker when
  // vault nicknames are applied.
  filePathExistsSync(absoluteFilePath) {
    return this.app.vault.adapter.fs.existsSync(absoluteFilePath);
  }
  readUtf8FileSync(absoluteFilePath) {
    return this.app.vault.adapter.fs.readFileSync(absoluteFilePath, "utf8");
  }
  writeUtf8FileSync(absoluteFilePath, content) {
    this.app.vault.adapter.fs.writeFileSync(absoluteFilePath, content, "utf8");
  }
};
var VaultNicknameSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("vault-nickname-settings");
    new import_obsidian.Setting(containerEl).setName("Vault nickname").setDesc("Override the vault's display name.").setTooltip(
      import_obsidian.Platform.isDesktop ? "A vault nickname controls the text shown in the workspace's vault switcher. The 'Manage Vaults' window will continue showing the true vault name as these may be disambiguated by their visible path." : "A vault nickname controls the text shown in the workspace's side panel."
    ).addText((textComponent) => {
      textComponent.setPlaceholder("No nickname").setValue(this.plugin.sharedSettings.nickname).onChange(async (newValue) => {
        this.plugin.sharedSettings.nickname = newValue;
        await this.plugin.saveSettings();
      });
    }).addButton((buttonComponent) => {
      buttonComponent.setIcon("folder-up").setTooltip("Use the name of the vault's parents folder.").onClick(async (mouseEvent) => {
        const parentFolderName = this.plugin.getVaultParentFolderName();
        if (!parentFolderName) {
          return;
        }
        this.plugin.sharedSettings.nickname = parentFolderName;
        this.display();
        await this.plugin.saveSettings();
      });
    });
    if (import_obsidian.Platform.isDesktopApp) {
      new import_obsidian.Setting(containerEl).setName("Nickname in app title").setDesc("Position and use of vault nickname in the app title.").addDropdown((dropdownComponent) => {
        dropdownComponent.addOption("override-app-title:off", "Off");
        dropdownComponent.addOption("override-app-title:vault-first", "Vault name first");
        dropdownComponent.addOption("override-app-title:file-first", "File name first");
        dropdownComponent.setValue(this.plugin.settings.overrideAppTitle);
        dropdownComponent.onChange(async (newValue) => {
          this.plugin.settings.overrideAppTitle = newValue;
          this.plugin.refreshVaultDisplayName();
          await this.plugin.saveSettings();
        });
      });
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
